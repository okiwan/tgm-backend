from django.db import models


class Group(models.Model):
    # File IDs that the company has, related to that customer
    file_id = models.CharField(max_length=255, blank=True, null=True)

    # Name of the group/customer
    name = models.CharField(max_length=255, blank=True, null=True)

    # It's a group or just individuals ? 0 = Group; 1 = Individuals
    fit_flag = models.IntegerField(null=False)

    # Source country of the customer
    country = models.CharField(max_length=255, blank=True, null=True)

    # Number of components on the customer's group
    components = models.IntegerField(null=False)

    # Name of the external company that is hiring ours
    company_name = models.CharField(max_length=255, blank=True, null=True)

    # Product name contracted
    product_name = models.CharField(max_length=255, blank=True, null=True)

    # Starting date of the trip
    start_date = models.DateField(null=True)

    # End date of the trip
    end_date = models.DateField(null=True)

    # Destination of the customer
    destination_location = models.CharField(max_length=255, blank=True, null=True)

    # Hotel assigned to the customers on that location
    destination_hotel = models.CharField(max_length=255, blank=True, null=True)

    # Status of the request: Pending; Confirmed; Cancelled
    status = models.CharField(max_length=255, blank=True, null=False)

    # Date usually associated with the 'Not Confirmed' status
    followup_date = models.DateField(null=True)

    # Profit (amount of money) generated by the transaction
    profit = models.CharField(max_length=255, blank=True, null=True)

    # If not payed already, amount of deposit that the customer has pending for payment
    deadline_deposit = models.CharField(max_length=255, blank=True, null=True)

    # Employee that is currently managing this request
    assigned_to = models.CharField(max_length=255, blank=True, null=True)

    # You can use this field to insert any comments, annotations, etc, related to this group
    memo = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return self.name

    def is_valid(self):
        return (self.components > 0) and (self.status in ['0', '1', '2'])

    is_valid.admin_order_field = 'name'
    is_valid.boolean = True
    is_valid.short_description = 'Is valid?'


class Filter(models.Model):
    name = models.TextField(max_length=255, blank=False, null=False)

    def __str__(self):
        return self.name


class FilterRule(models.Model):
    filter = models.ForeignKey(Filter, on_delete=models.CASCADE)
    rule = models.CharField(max_length=255, blank=False, null=False)

    def __str__(self):
        return self.rule

